{"name":"OrderManager Database","tagline":"Project using Apache Derby for CS 5200","body":"# OrderManager Database\r\nAuthors: Karan Machado (@karan1511) and Kai Wu (@wukai)\r\n\r\n## Overview\r\nOrderManager is written in Java 1.8 and is a relational database management system using Apache Derby. The database contains information about customers, products, inventory records, orders, and order records. The code here provides a foundation for a back-end for an application for managing products, product inventory, and customer orders for an online store. It keeps tracks of inventory for each product and orders placed by customers.  \r\n\r\n## Usage\r\nOrderManager class contains initialization of the database by creating instances of the other classes to handle connecting to the database, DDL, DML, and DQL. An instance of the API class is also created in OrderManager, enabling function calls to API methods. Currently, OrderManager is meant to test functionality of these other classes. \r\n\r\n## Tables\r\n\r\n### product\r\nThe product table represents a product in the database. A product has a vendor product SKU that uniquely identifies it, as well as a name and a description. Has a 1-to-1 relationship with inventory_record.\r\n\r\n| Column ID | Column | Data Type | Constraints | Description |\r\n|-----------|---------------------|---------------|-------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| 1 | product_name | VARCHAR(32) | Not null | Represents the product's name as a string of up to 32 characters. |\r\n| 2 | product_description | VARCHAR(1000) | Not null | Contains the description of the product. Holds up to 1000 characters. |\r\n| 3 | **product_SKU** | VARCHAR(12) | Not null | Primary key for the product table. Contains the vendor product SKU that identifies the product. The SKU is a 12-character value of the form \"AA-NNNNNN-CC\", where A is an upper-case letter, N is a digit from 0-9, and C is either a digit or an upper case letter. Example of a valid SKU: \"AB-123456-0C\". Validity of the SKU is checked by the stored function isSKU() defined by DBMS_storedfunc.java. |\r\n\r\n### inventory_record\r\nThe inventory_record table represents available inventory in the store. For each product, the inventory_record keeps track of the price and number of available units to order. Has a 1-to-1 relationship with product. This table is checked when an order is placed to make sure the number of units ordered is valid, and to get the price for that product.\r\n\r\n| Column ID | Column | Data Type | Constraints | Description |\r\n|-----------|----------------|--------------|----------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| 1 | **product_SKU** | VARCHAR(12) | Not null | Primary key for inventory_record. Also a foreign key that references product_SKU in the product table. When product_SKU is deleted from product_SKU, rows with matching product_SKU in inventory_record will also be deleted. The product_SKU uniquely identifies the product and is a 12-character value of the form \"AA-NNNNNN-CC\", where A is an upper-case letter, N is a digit from 0-9, and C is either a digit or an upper case letter. Example of a valid SKU: \"AB-123456-0C\". |\r\n| 2 | no_of_units | INTEGER | Not null, must be greater than or equal to 0 | Represents the number of available units for the product in the inventory. The constraint is checked by the stored function isUnit() which is defined by DBMS_storedfunc.java.  |\r\n| 3 | price_per_unit | DECIMAL(7,2) | Not null, must be greater than or equal to 0 | Represents the price (in USD) per unit of the product. The constraint is checked by the stored function isPrice() which is defined by DBMS_storedfunc.java. |\r\n\r\n### customer\r\nThe customer table represents the customers, each uniquely indentified by an automatically generated customer id. The customer table contains the customer's name and address, and does not contain any payment information. Has a 1-to-many relationship with the orders table.\r\n\r\n| Column ID | Column | Data Type | Constraints | Description |\r\n|-----------|------------|-------------|--------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| 1 | **CUST_ID** | INTEGER | Not null | Primary key for customer. Automatically generated starting at 1, incrementing by 1. Uniquely identifies a customer. |\r\n| 2 | GivenName | VARCHAR(32) | Not null | Represents the customer's given name, holding up to 32 characters. |\r\n| 3 | FamilyName | VARCHAR(32) | Not null | Represents the customer's family name, holding up to 32 characters. |\r\n| 4 | Address | VARCHAR(64) | Not null | Contains the street address for the customer, holding up to 64 characters. |\r\n| 5 | City | VARCHAR(64) | Not null | Contains the city of the address for the customer, holding up to 64 characters. |\r\n| 6 | State | VARCHAR(4) | Not null, if country is US, checks if valid US state | Contains the abbreviated form of the state of the customer, holding up to 4 characters. If the state lies within the US, it is checked by the stored function isState() defined by DBMS_storedfunc.java to ensure it is a valid US state. |\r\n| 7 | ZipCode | VARCHAR(16) | Not null, if country is US, checks if valid US zipcode | Contains the zip code for the address of the customer as a string. Can contain 5 digits or the complete 9 digit zip code. If the country is the US, it is checked by the stored function isZipCode() defined by DBMS_storedfunc.java to ensure it is a valid US zip code.  |\r\n| 8 | Country | VARCHAR(32) | Not null, checks if valid country | Contains the country for the address of the customer, holding up to 32 characters. Checks if the country is a valid country by using the stored function isCountry() which is defined by DBMS_storedfunc.java. |\r\n\r\n### orders\r\nThe orders table represents an order that is placed. Each order has an automatically generated order id, and an customer id that references the customer who placed that order. The table also contains the date of the order and date of shipment if the order has been shipped. The orders table does not contain information about what products are ordered, which is kept track of by the order_record table. It has a many-to-1 relationship with customer, and a 1-to-many relationship with order_record. \r\n\r\n| Column ID | Column | Data Type | Constraints | Description |\r\n|-----------|---------------|-----------|-------------|------------------------------------------------------------------------------------------------------------------------------|\r\n| 1 | **order_id** | INTEGER | Not null | Primary key for the order table. Automatically generated, starting at 1 and incrementing by 1. Uniquely identifies an order. |\r\n| 2 | order_date | DATE | Not null | Holds the date the order was created. |\r\n| 3 | shipment_date | DATE | None | Holds the date the order was shipped. If not yet shipped, the field is null. |\r\n| 4 | CUSTOMER_ID | INTEGER | Not null | Foreign key that references CUST_ID from the customer table. Represents which customer placed the order. If a customer is deleted from the customer table, all orders corresponding to that customer are deleted as well.\r\n\r\n### order_record\r\nThe order_record table contains information about an order, where each row of the table represents a product that has been ordered. The order_id column specifies what order, and the product_SKU column specifies what product was ordered. The order_record table also provides information on the number of units ordered and the price per unit at the time of order. It has a many-to-1 relationship with orders table.\r\n\r\n| Column ID | Column | Data Type | Constraints | Description |\r\n|-----------|----------------|--------------|--------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| 1 | order_id | INTEGER | Not null | Foreign key that references the order_id from the orders table. When an order is deleted from orders table, the corresponding order records are deleted from this table using order_id. |\r\n| 2 | no_of_units | INTEGER | Not null, greater than or equal to 0 | Represents the ordered number of units for the product. Constraint is checked by the stored function isUnit() defined by DBMS_storedfunc.java. |\r\n| 3 | price_per_unit | DECIMAL(7,2) | Not null, greater than or equal to 0 | Represents the price per unit of the ordered product. Constraint is checked by the stored function isPrice() defined by DBMS_storedfunc.java. |\r\n| 4 | product_SKU | VARCHAR(12) | Not null | Foreign key that references the product_SKU from the product table. The no_of_units and price_per_unit refer to the product specified by this product_SKU. |\r\n\r\n\r\n## Classes\r\n\r\n### OrderManager\r\nInitializes the database and functions from other classes should be called in main. \r\nHolds information about the database as private variables accessible to itself, with crucial \r\nones passed as parameters to other functions (most notably: Statement s and Connection conn).\r\n\r\n### OrderManager_Connection\r\nEstablishes connection to the database and handles closing it. Should not need any changes or additions.\r\n\r\n### OrderManager_DDL\r\nHas functions to create all tables, triggers, and functions (and procedures, but we do not have any right now).\r\nAlso has functions to drop tables, triggers, and functions (and procedures, if we add any).\r\nThis is where we should edit if we want to change how tables are created, modify domain constraints, etc.\r\n\r\n### OrderManager_DML\r\nHandles insert, alter, and delete. Has functions to insert for customer, product, and inventory_record. \r\nWill also truncate all tables to clear them of data.\r\n\r\n### OrderManager_DQL\r\nContains functions that select for certain rows. Functions could use more work, particularly in modularizing them so that they don't just print to standard out (returning results in some way would be useful, especially if API could call on these functions directly). Useful functions that maybe should be in API are the selectAllAvailableProducts() and selectAllCustomerOrders() which display product names and inventory information and all orders of a specified customer, respectively. \r\n\r\n### OrderManager_API\r\nContains functions that should be primarily called upon by a user to interact with the database. Current functionality includes creating a customer, creating an order and order record for a specified customer, creating a product, and getting the total cost of a specific order.\r\n\r\n\r\n### DBMS_storedfunc\r\nContains stored functions used by the OrderManager_DDL class when creating constraints. Does not need any more additions or changes.\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}